language: node_js
services:
- docker
- mongodb
branches:
  only:
  - develop
  - master
  - "/^\\d+\\.\\d+\\.\\d+(-rc\\.\\d+)?$/"
git:
  depth: 1
node_js:
- '8'
addons:
  apt:
    sources:
    - google-chrome
    - ubuntu-toolchain-r-test
    packages:
    - google-chrome-stable
    - g++-4.8
  firefox: "latest"
before_cache:
- rm -rf $HOME/build/RocketChat/Rocket.Chat/.meteor/local/log
- rm -rf $HOME/build/RocketChat/Rocket.Chat/.meteor/local/run
- rm -rf $HOME/build/RocketChat/Rocket.Chat/.meteor/local/db
cache:
  directories:
  - "$HOME/node_modules"
  - "$HOME/.meteor"
  - "$HOME/.npm"
  - "$HOME/.node-gyp"
  - "$HOME/build/RocketChat/Rocket.Chat/node_modules"
  - "$HOME/build/RocketChat/Rocket.Chat/.meteor/local"
  - "$HOME/build/RocketChat/Rocket.Chat/packages/rocketchat-livechat/.npm"
  - "$HOME/build/RocketChat/Rocket.Chat/packages/rocketchat-livechat/.app/node_modules"
  - "$HOME/build/RocketChat/Rocket.Chat/packages/rocketchat-livechat/.app/.meteor/local"
before_install:
- if [ ! -e "$HOME/.meteor/meteor" ]; then curl https://install.meteor.com | sed s/--progress-bar/-sL/g | /bin/sh; fi
# Start X Virtual Frame Buffer for headless testing with real browsers
- .scripts/start-xvfb.sh
install:
- export PATH="$HOME/.meteor:$PATH"
before_script:
- if [[ $TRAVIS_TAG ]]; then meteor reset; fi
- echo "replication:" | sudo tee -a /etc/mongod.conf
- |-
  echo "  replSetName: \"rs0\"" | sudo tee -a /etc/mongod.conf
- sudo service mongod restart
- mkdir /tmp/build
- meteor --version
- travis_retry git submodule init
- travis_retry git submodule update
- travis_retry meteor npm install
- |-
  mongo --eval 'rs.initiate({_id:"rs0", members: [{"_id":1, "host":"localhost:27017"}]})'
- chmod +x .scripts/smarti.sh
- .scripts/smarti.sh
- meteor npm run lint
- meteor npm run testunit
- meteor npm run stylelint
- travis_wait travis_retry meteor build --headless /tmp/build
- mkdir /tmp/build-test
- tar -xf /tmp/build/Rocket.Chat.tar.gz -C /tmp/build-test/
- cd /tmp/build-test/bundle/programs/server
- npm install
- cd -
- mongo --eval 'rs.status()'
- mongo meteor --eval 'db.getCollectionNames()'
script:
- npm test
# - mongo meteor --eval 'db.dropDatabase()'
# - unset MONGO_OPLOG_URL
# - npm test

before_deploy:
- mkdir -p /tmp/build/rocketchat
- export BUILD_FILE=Assistify_Chat_${TRAVIS_BRANCH/\//_}_${TRAVIS_COMMIT:1}.tar.gz
- mv /tmp/build/Rocket.Chat.tar.gz /tmp/build/rocketchat/${BUILD_FILE}

deploy:
- provider: s3
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY
  local_dir: /tmp/build/
  skip_cleanup: true
  on: &1
    repo: assistify/Rocket.Chat
    branch: develop
  bucket: $AWS_BUCKET
  region: $AWS_REGION
- provider: s3
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY
  local_dir: /tmp/build/
  skip_cleanup: true
  on: &2
    repo: assistify/Rocket.Chat
    branch: master
  bucket: $AWS_BUCKET
  region: $AWS_REGION

after_deploy:
- ./scripts/check-deploy.sh

env:
  global:
    - secure: $SECRET_ASSETS_URL
    - secure: $SECRET_AWS_ACCESS_KEY
    - secure: $SECRET_AWS_SECRET_KEY
    - secure: $SECRET_AWS_BUCKET
    - secure: $SECRET_AWS_REGION
    - DISPLAY=:99.0
    - CXX=g++-4.8
    - MONGO_OPLOG_URL: "mongodb://localhost:27017/local"
    - MONGO_URL: "mongodb://localhost:27017/meteor"
    - TEST_MODE: "true"
    - TRAVIS_SECURE_ENV_VARS: "true"
